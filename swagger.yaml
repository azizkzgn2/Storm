---
openapi: "3.0.1"
info:
  title: "Storm"
  version: "v1"
paths:
  /api/chat/send:
    post:
      tags:
        - "Chat"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/CreateMessageDto"
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMessageDto"
          text/json:
            schema:
              $ref: "#/components/schemas/CreateMessageDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/CreateMessageDto"
      responses:
        200:
          description: "Success"
  /api/chat/delete/{messageId}:
    delete:
      tags:
        - "Chat"
      parameters:
        - name: "messageId"
          in: "path"
          required: "true"
          style: "simple"
          schema:
            type: "integer"
            format: "int32"
      responses:
        200:
          description: "Success"
  /api/chat/edit/{messageId}:
    put:
      tags:
        - "Chat"
      parameters:
        - name: "messageId"
          in: "path"
          required: "true"
          style: "simple"
          schema:
            type: "integer"
            format: "int32"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/EditMessageDto"
          application/json:
            schema:
              $ref: "#/components/schemas/EditMessageDto"
          text/json:
            schema:
              $ref: "#/components/schemas/EditMessageDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/EditMessageDto"
      responses:
        200:
          description: "Success"
  /api/chat/react/{messageId}:
    post:
      tags:
        - "Chat"
      parameters:
        - name: "messageId"
          in: "path"
          required: "true"
          style: "simple"
          schema:
            type: "integer"
            format: "int32"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/UpsertEmojiReactionDto"
          application/json:
            schema:
              $ref: "#/components/schemas/UpsertEmojiReactionDto"
          text/json:
            schema:
              $ref: "#/components/schemas/UpsertEmojiReactionDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/UpsertEmojiReactionDto"
      responses:
        200:
          description: "Success"
  /api/chat/unreact/{messageId}:
    delete:
      tags:
        - "Chat"
      parameters:
        - name: "messageId"
          in: "path"
          required: "true"
          style: "simple"
          schema:
            type: "integer"
            format: "int32"
      responses:
        200:
          description: "Success"
  /api/chat/read/{chatId}:
    post:
      tags:
        - "Chat"
      parameters:
        - name: "chatId"
          in: "path"
          required: "true"
          style: "simple"
          schema:
            type: "string"
      responses:
        200:
          description: "Success"
  /api/chat/mute/{chatId}:
    post:
      tags:
        - "Chat"
      parameters:
        - name: "chatId"
          in: "path"
          required: "true"
          style: "simple"
          schema:
            type: "string"
      responses:
        200:
          description: "Success"
  /api/chat/pin/{chatId}:
    post:
      tags:
        - "Chat"
      parameters:
        - name: "chatId"
          in: "path"
          required: "true"
          style: "simple"
          schema:
            type: "string"
      responses:
        200:
          description: "Success"
  /api/chat/archive/{chatId}:
    post:
      tags:
        - "Chat"
      parameters:
        - name: "chatId"
          in: "path"
          required: "true"
          style: "simple"
          schema:
            type: "string"
      responses:
        200:
          description: "Success"
  /api/chat/get/{chatId}:
    get:
      tags:
        - "Chat"
      parameters:
        - name: "chatId"
          in: "path"
          required: "true"
          style: "simple"
          schema:
            type: "string"
      responses:
        200:
          description: "Success"
  /api/chat/get-all:
    get:
      tags:
        - "Chat"
      responses:
        200:
          description: "Success"
  /api/contact/create:
    post:
      tags:
        - "Contact"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/CreateContactDto"
          application/json:
            schema:
              $ref: "#/components/schemas/CreateContactDto"
          text/json:
            schema:
              $ref: "#/components/schemas/CreateContactDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/CreateContactDto"
      responses:
        200:
          description: "Success"
  /api/contact/get-all:
    get:
      tags:
        - "Contact"
      responses:
        200:
          description: "Success"
  /api/contact/remove/{id}:
    delete:
      tags:
        - "Contact"
      parameters:
        - name: "id"
          in: "path"
          required: "true"
          style: "simple"
          schema:
            type: "integer"
            format: "int32"
      responses:
        200:
          description: "Success"
  /api/contact/removeByUserId/{id}:
    delete:
      tags:
        - "Contact"
      parameters:
        - name: "id"
          in: "path"
          required: "true"
          style: "simple"
          schema:
            type: "string"
      responses:
        200:
          description: "Success"
  /api/user/login:
    post:
      tags:
        - "User"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/LoginDto"
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
          text/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/LoginDto"
      responses:
        200:
          description: "Success"
  /api/user/register:
    post:
      tags:
        - "User"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/RegisterDto"
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterDto"
          text/json:
            schema:
              $ref: "#/components/schemas/RegisterDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/RegisterDto"
      responses:
        200:
          description: "Success"
  /api/user/logout:
    post:
      tags:
        - "User"
      responses:
        200:
          description: "Success"
  /api/user/get-user:
    get:
      tags:
        - "User"
      responses:
        200:
          description: "Success"
  /api/user/update-username:
    put:
      tags:
        - "User"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/UpdateUsernameDto"
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUsernameDto"
          text/json:
            schema:
              $ref: "#/components/schemas/UpdateUsernameDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/UpdateUsernameDto"
      responses:
        200:
          description: "Success"
  /api/user/update-profile-picture:
    put:
      tags:
        - "User"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/UpdateProfilePictureDto"
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProfilePictureDto"
          text/json:
            schema:
              $ref: "#/components/schemas/UpdateProfilePictureDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/UpdateProfilePictureDto"
      responses:
        200:
          description: "Success"
  /api/user/update-user-about:
    put:
      tags:
        - "User"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/UpdateUserAboutDto"
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserAboutDto"
          text/json:
            schema:
              $ref: "#/components/schemas/UpdateUserAboutDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/UpdateUserAboutDto"
      responses:
        200:
          description: "Success"
  /api/user/delete-user:
    delete:
      tags:
        - "User"
      responses:
        200:
          description: "Success"
  /api/user/update-user-last-seen:
    put:
      tags:
        - "User"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/UpdateUserLastSeenDto"
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserLastSeenDto"
          text/json:
            schema:
              $ref: "#/components/schemas/UpdateUserLastSeenDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/UpdateUserLastSeenDto"
      responses:
        200:
          description: "Success"
  /api/user/search-users:
    get:
      tags:
        - "User"
      parameters:
        - name: "Username"
          in: "query"
          style: "form"
          schema:
            type: "string"
        - name: "Page"
          in: "query"
          style: "form"
          schema:
            type: "integer"
            format: "int32"
        - name: "PageSize"
          in: "query"
          style: "form"
          schema:
            type: "integer"
            format: "int32"
      responses:
        200:
          description: "Success"
  /api/user/get-user/{id}:
    get:
      tags:
        - "User"
      parameters:
        - name: "id"
          in: "path"
          required: "true"
          style: "simple"
          schema:
            type: "string"
      responses:
        200:
          description: "Success"
components:
  schemas:
    CreateContactDto:
      type: "object"
      properties:
        contactUserId:
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    CreateMessageDto:
      type: "object"
      properties:
        content:
          type: "string"
          nullable: "true"
        receiverId:
          type: "string"
          nullable: "true"
        media:
          type: "array"
          items:
            type: "string"
            format: "byte"
          nullable: "true"
        chatId:
          type: "string"
          nullable: "true"
        groupId:
          type: "integer"
          format: "int32"
          nullable: "true"
        createdAt:
          type: "string"
          format: "date-time"
        editedAt:
          type: "string"
          format: "date-time"
          nullable: "true"
      additionalProperties: "false"
    EditMessageDto:
      type: "object"
      properties:
        content:
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    LoginDto:
      required:
        - "email"
        - "password"
      type: "object"
      properties:
        email:
          minLength: "1"
          type: "string"
          format: "email"
        password:
          minLength: "1"
          type: "string"
      additionalProperties: "false"
    RegisterDto:
      required:
        - "confirmPassword"
        - "email"
        - "password"
        - "username"
      type: "object"
      properties:
        email:
          minLength: "1"
          type: "string"
          format: "email"
        username:
          maxLength: "20"
          minLength: "1"
          type: "string"
        password:
          minLength: "1"
          type: "string"
        confirmPassword:
          minLength: "1"
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
      additionalProperties: "false"
    UpdateProfilePictureDto:
      required:
        - "profilePicture"
      type: "object"
      properties:
        profilePicture:
          minLength: "1"
          type: "string"
      additionalProperties: "false"
    UpdateUserAboutDto:
      type: "object"
      properties:
        about:
          maxLength: "100"
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    UpdateUserLastSeenDto:
      type: "object"
      properties:
        lastSeen:
          type: "string"
          format: "date-time"
      additionalProperties: "false"
    UpdateUsernameDto:
      required:
        - "username"
      type: "object"
      properties:
        username:
          maxLength: "25"
          minLength: "1"
          type: "string"
      additionalProperties: "false"
    UpsertEmojiReactionDto:
      type: "object"
      properties:
        emoji:
          type: "string"
          nullable: "true"
      additionalProperties: "false"
  securitySchemes:
    Bearer:
      type: "http"
      description: "Please enter a valid token"
      scheme: "Bearer"
      bearerFormat: "JWT"
security:
  - Bearer:
